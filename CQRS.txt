CQRS (Command Query Responsability Segregation)
--------------------------
BENEFICIOS

Escalabilidad -> Las querys pueden separarse y ejecutarse en su propio ambiente independientemente de las operaciones comando.

Performance -> Podemos añadir optimizaciones que no serían posibles con otro modelo.

Simplicidad -> Es más sencillo de mantener.
--------------------------
-------------------------------------

OPERACIONES

Query -> Operaciones de alto nivel que consultan datos. Retorna datos.

Command -> Operaciones de alto nivel que modifican datos. No retornan datos. En la práctica pueden retornar flags, errores o ids

-------------------------------------

EVENT-SOURCING 
------------------------------------
Todos los cambios realizados a una entidad deben ser almacenados en una secuencia inmutable de eventos.
-----------------------------------

Event Store -> Registra todos los eventos sobre las entidades del sistema.

BENEFICIOS DE EVENT STORE

Contiene registros de todos los eventos.

Es posible recrear el estado del objeto entidad.

Mejora el procesamiento de escritura.

NO EXISTEN OPERACIONES PARA ELIMINAR O ACTUALIZAR Events.

En si es una base de datos que almacena los eventos inmutables secuencialmente.

Solo debe ser capaz de almacenar eventos.

Cada evento representa un estado de un aggregate en un determinado punto de tiempo.

Son agregados cronológicamente

El estado de un aggregate puede ser recreado ejecutando el event store.

Implementa Optimist Concurrency Control.

------------------------------------------------------

EVENT-BUS -> APACHE KAFKA

Plataforma de streaming de eventos.

ZOOKEEPER

Cluster de instancias de Kafka.
Selecciona cual debe ser instanciado.


------------------------------------------------------

Messages en CQRS

- Commands -> Combinación de un Expressed intent.
              Descripción de una actividad que deseamos realizar.
              Se definen como un verbo imperativo.
              Objeto de tipo Message con su identificador único.

- Events -> Describe una actividad que sucedió.
            Los aggregate disparan eventos. (Entidades que mantienen el estado).
            Los eventos se asignan a clases con nombres en pasado.

- Queries ->

